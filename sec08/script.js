// 様々なWebアプリケーションで提供されている基本機能
// - ドラッグアンドドロップ
// - 非同期読み込み
// - キーボードショートカット(キーボードアクセス)
// - アニイメーション

// onloadイベントハンドラに処理を記述することで, ページの読み込み完了後に処理を実行できる.
// ページすべてを読み込んだ後で実行されるので, 全てのDOM要素を操作できる.
window.onload = function () { alert('hello'); }
// ただし, すべての画像ファイルを読み込んだ後に発火するため, 巨大な画像ファイルが存在すると
// JS実行まで必要以上に時間が掛かる.
// なので, 適切な方法はDOMContentLoadedを使用することである.


// デバッグ
// console.log()
// console.dir()   : 引数に渡されたオブジェクトをダンプして見やすくする.
// console.dirxml(): DOM要素をHTMLとして表示する.
// console.trace() : その関数がどこから呼ばれたのか表示される.
// 時間の測定　　　: console.time()メソッドからconsole.timeEnd()メソッドまでの時間を計測してくれる.
//                   それぞれの引数に名前を指定する. 同じ名前が指定されたものがペアとなり, その間の
//                   経過時間が出力される.
// console.count() : その行が何度実行されたかがわかる. 引数に名前を指定する.
// console.profile()メソッドとconsole.profileEnd()メソッドも時間計測にはかかせない.

// デバッガ
// debuggerと記述するとブレークされデバッガが起動する.

// それぞれのブラウザではレンダリングエンジン, JavaScriptエンジンが異なる.
// 異なるブラウザでアクセスされた場合にできるだけ同じ挙動, 同じ表現ができるように対策することを
// 「クロスブラウザ対策」という.
//
// 具体的な対策
// 1. ユーザエージェントで判断する
// 2. 機能の有無で判断する


// windowオブジェクトがグローバルオブジェクトになる.
// windowオブジェクトがJSで扱うことができるオブジェクト構造の最上位オブジェクトである.
